import React, { Fragment, useState, useEffect } from 'react';
import { Transition } from '@headlessui/react';
import { useLocales } from '../../providers/LocaleProvider';
import { fetchNui } from '../../utils/fetchNui';
import { debugData } from '../../utils/debugData';
import { useNuiEvent } from '../../hooks/useNuiEvent';
import { If, Then, Else, Switch, Case } from 'react-if';
import { PDAVisibilityType } from '../../utils/enum';
import { isEnvBrowser } from '../../utils/misc';
import { useHandbookDataState, useSetHandbookData } from '../../state/handbook';
import tw from 'tailwind-styled-components';
import useSound from 'use-sound';
import { Tooltip } from 'react-tooltip';
import clickSfx from '@assets/sounds/gtaselect.mp3';
import hoverSfx from '@assets/sounds/hover.mp3';

import truckIcon from '@assets/images/icons/truck.svg';
import handbookIcon from '@assets/images/icons/handbook.svg';
import crateIcon from '@assets/images/icons/crate.svg';
import 'react-circular-progressbar/dist/styles.css';

import TruckerHandbookComp from '../components/TruckerHandbook';
import TruckRentalList from '../components/TruckRentalList';
import PDAStatics from '../components/PDAStatics';
import { TruckerHandbook, TruckRentalData } from '../../types';
import { useSetTruckRentalData, useTruckRentalDataState } from '../../state/rental';
import { usePDAVisibilityState } from '../../state/visibility';
import IndustryList from '../components/IndustryList';
import VehicleCapacityList from '../components/VehicleCapacityList';
import { useCarryData, useTruckerData, useVehicleListData } from '../../state/pda';
import SwitchToggle from '../components/SwitchToggle';

const TruckerPDA: React.FC<{ toggleModal: boolean }> = ({ toggleModal }) => {
  const { locale } = useLocales();

  const [enabled, setEnabled] = useState(toggleModal);
  const [isHandbookOpen, setHandbookIsOpen] = useState(false);
  const [isTruckRentalOpen, setTruckRentalOpen] = useState(false);
  const [pdaVisible, setPDAVisible] = usePDAVisibilityState();
  const [handbookData, setHandbookData] = useHandbookDataState();
  const [truckRentalData, setTruckRentalData] = useTruckRentalDataState();
  const vehicleList = useVehicleListData();
  const carryData = useCarryData();
  const truckerData = useTruckerData();

  const [playClick] = useSound(clickSfx, { volume: 0.25 });
  const [playHover] = useSound(hoverSfx, { volume: 0.25 });

  const setToggleModalEnabled = (toggle: boolean) => {
    setEnabled(toggle);
    fetchNui('toggleModalConfirm', {
      toggle: toggle,
    });
  };

  const selectHandbook = async () => {
    if (handbookData.title === '') {
      const handbook: TruckerHandbook = await fetchNui(
        'loadTruckHandbook',
        {},
        {
          title: 'Become a trucker in 5 step',
          handbook: [
            {
              title: 'Step 1: Rent a truck',
              description:
                'Find the right vehicle for you in the menu F1->TPDA->Vehicles\n\
              and go to the rental place to rent it\n\
              I recommend you choose a vehicle that can carry crates to start',
            },
            {
              title: 'Step 2: Check what industries offer something',
              description:
                "Open Trucker PDA Menu with the F1 key\nSelect show all Secondary Industries\n\
              Check a secondary industry, because these ones usually require (want) something from you.\n\
              Because you can only transport crate, let's have a look at the Paleto Bay Food Processing Plant.\n\
              Let's do it and come back here",
            },
            {
              title: 'Continue',
              description:
                "Okay it seems like this industry wants some eggs! As you can see, so it's our time to shine and bring some!",
            },
            {
              title: 'Step 3: Check where to find the commodity you need',
              description:
                'Now back to TPDA Menu and select Show All Primary Industries\n\
              There, you can find out that eggs are generated by farms. \n\
              Check some farms. I have decided to check No 12 Farm, because it is the closest egg production place.',
            },
            {
              title: 'Step 4: Load the cargo on your vehicle',
              description:
                "In Trucker PDA  navigate through to No 12 Farm dialog and click on the Proceed button.\n\
              And there will be a menu that will give you directions to where No 12 Farm's eggs are sold.\n\
              You can buy crate by press `E` at trading point then\n\
              You can place them in the vehicle by press `LALT` on trunk and select `Load Package`  (Vehicle must be UNLOCKED!)\n\
              Repeat as long as there is place in the vehicle or as long as you have money.\n\
              If you want to return the crate back, press `E` at same trading point and sell, your money will be returned.",
            },
            {
              title: 'More Information',
              description:
                "Since we're buying crates, we have to buy and place them in the vehicle manually.\n\
              If they weren't crates, we'd drive our truck to the marker and use the same action\n",
            },
            {
              title: 'Step 5: Sell the cargo to the next industry',
              description:
                'Now navigate to the Paleto Bay Food Processing Plant â†’ eggs storage using the same way as described in step 4.\n\
              When you get there, step out of your vehicle, go to the back of it and press `LALT` then select `Check Vehicle Storage`.\n\
              That will show you everything that is in the vehicle.\n\
              Pick the egg crate up by clicking on Pick up, goto Arrow and press `E` to sell your crate and take profit',
            },
          ],
        }
      );
      if (handbook) {
        setHandbookData(handbook);
        setHandbookIsOpen(true);
      }
    }

    playClick();
    if (handbookData.title !== '') {
      setHandbookIsOpen(true);
    }
  };

  const selectTruckRental = async () => {
    if (truckRentalData.length <= 0) {
      const truckrental: TruckRentalData[] = await fetchNui('loadTruckRental', {}, [
        {
          id: 'truck_rental_1',
          title: 'Rental location number 1',
          description: 'Location for renting crate transport vehicles',
        },
        {
          id: 'truck_rental_2',
          title: 'Rental location number 2',
          description: 'Location for renting liquid transport vehicles',
        },
      ]);
      if (truckrental) {
        setTruckRentalData(truckrental);
        setTruckRentalOpen(true);
      }
    }
    playClick();

    if (truckRentalData.length > 0) {
      setTruckRentalOpen(true);
    }
  };

  return (
    <>
      <Transition appear show={true} as={Fragment}>
        <div className="relative z-10 w-[1920px] h-[1080px] flex justify-center items-center">
          <Transition.Child
            as={Fragment}
            enter="ease-out duration-300"
            enterFrom="opacity-0"
            enterTo="opacity-100"
            leave="ease-in duration-200"
            leaveFrom="opacity-100"
            leaveTo="opacity-0"
          >
            <div className="fixed inset-0 bg-main-2 bg-cover" />
          </Transition.Child>
          <div className="fixed inset-0 z-10 flex min-h-full w-full items-center justify-center p-0 text-center">
            <Transition.Child
              as={Fragment}
              enter="ease-out duration-300"
              enterFrom="opacity-0 translate-y-4 translate-y-0 scale-95"
              enterTo="opacity-100 translate-y-0 scale-100"
              leave="ease-in duration-200"
              leaveFrom="opacity-100 translate-y-0 scale-100"
              leaveTo="opacity-0 translate-y-4 translate-y-0 scale-95"
            >
              <div className="relative w-full max-w-7xl transform bg-purple text-left shadow-xl transition-all">
                <div className="p-4">
                  <MainWrapper>
                    <HeaderWrapper>
                      <Header>
                        <button
                          className="cursor-pointer italic hover:drop-shadow-sglowhover"
                          onClick={() => {
                            playClick();
                            setPDAVisible(PDAVisibilityType.Statics);
                          }}
                        >
                          TRUCKER <span className="text-yellow-200">PDA</span>
                        </button>
                      </Header>
                      <If condition={carryData.isCarry}>
                        <Then>
                          <HeaderButton>
                            <HeaderText
                              data-tooltip-id="carrydata-tooltip"
                              data-tooltip-content={locale.cargo_in_hand}
                              className="mr-2"
                            >
                              {carryData.itemName} - ${carryData.buyPrice}
                              <br />
                              {carryData.industryName}
                            </HeaderText>
                            <img src={crateIcon} width="50vw" />
                          </HeaderButton>
                          <Tooltip id="carrydata-tooltip" />
                        </Then>
                        <Else>
                          <div></div>
                        </Else>
                      </If>
                      <HeaderButtonWrapper>
                        <HeaderButton onClick={() => selectHandbook()}>
                          <HeaderText>{locale.trucker_handbook}</HeaderText>
                          <img src={handbookIcon} width="50vw" />
                        </HeaderButton>
                        <HeaderButton onClick={() => selectTruckRental()}>
                          <HeaderText>{locale.truck_rental}</HeaderText>
                          <img src={truckIcon} width="60vw" />
                        </HeaderButton>
                      </HeaderButtonWrapper>
                    </HeaderWrapper>

                    <Switch>
                      <Case condition={pdaVisible === PDAVisibilityType.Statics}>
                        <PDAStatics />
                        <If condition={truckerData.totalPackage > 0}>
                          <Then>
                            <div
                              data-tooltip-id="switch-tooltip"
                              data-tooltip-content={locale.toggle_confirm_dialog}
                              className="absolute bottom-0 right-11 items-center justify-center"
                            >
                              <SwitchToggle enabled={enabled} setEnabled={setToggleModalEnabled} />
                            </div>
                            <Tooltip id="switch-tooltip" />
                          </Then>
                        </If>
                      </Case>
                      <Case condition={pdaVisible === PDAVisibilityType.IndustryList}>
                        <IndustryList />
                      </Case>
                      <Case condition={pdaVisible === PDAVisibilityType.VehicleCapacityList}>
                        <VehicleCapacityList vehicleList={vehicleList} />
                      </Case>
                    </Switch>
                  </MainWrapper>
                </div>
              </div>
            </Transition.Child>
          </div>
        </div>
      </Transition>
      <TruckerHandbookComp isTruckerHandbook={isHandbookOpen} setHandbookIsOpen={setHandbookIsOpen} />
      <TruckRentalList isShowTruckRental={isTruckRentalOpen} setTruckRentalOpen={setTruckRentalOpen} />
    </>
  );
};

export default TruckerPDA;

const MainWrapper = tw.div`
  grid grid-rows-trucker-pda grid-flow-col px-6 mb-4
`;

const HeaderWrapper = tw.div`
  justify-between items-center grid grid-cols-[40%_30%_30%]
`;

const Header = tw.div`
  font-poppins text-[3rem] font-extrabold italic text-white drop-shadow-glow
`;

const HeaderButtonWrapper = tw.div`
  flex justify-end gap-2
`;

const HeaderButton = tw.div`
  flex items-center justify-end
`;

const HeaderText = tw.p`
  cursor-pointer text-right font-normal text-white break-words drop-shadow-sglow
  hover:text-green-300 hover:drop-shadow-sglowhover
`;
